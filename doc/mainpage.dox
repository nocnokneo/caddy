/**

@mainpage Introduction

@author Taylor Braun-Jones <taylor@braun-jones.org>

@section problem_summary Problem Summary

Caddy is a robot entered into the 2005 Roborodentia. Roborodentia is an annual
autonomous robotics competition held during Cal Poly's Open House by the IEEE
Computer Society. Robot entries must navigate a maze searching for three
randomly placed golf balls, collect them, and then deposit the balls in the
“nest” at the end of the maze. The 2005 competition also included a new
aspect. Two bonus balls were placed on a platform behind the wall in two
predetermined corners of the maze such that the top of the golf ball was flush
with the top of the wall. The scoring breakdown is as follows:

<table>
  <tr>
    <th>Point Value</th>
    <th>Task</th>
  </tr>
  <tr>
    <td>1</td>
    <td>Passing the first turn in the maze - Point A</td>
  </tr>
  <tr>
    <td>1</td>
    <td>Triggering “nest” solenoid by activating optical sensor - Point X</td>
  </tr>
  <tr>
    <td>3</td>
    <td>Touching each ground ball (1 point per ball)</td>
  </tr>
  <tr>
    <td>3</td>
    <td>Collecting and possessing each ground ball (1 point per ball)</td>
  </tr>
  <tr>
    <td>3</td>
    <td>Bringing each ground ball to “nest” - Area B (1 point per ball)</td>
  </tr>
  <tr>
    <td>9</td>
    <td>Placing each ground ball in “nest” - Point E (3 points per ball)</td>
  </tr>
  <tr>
    <td>10</td>
    <td>Collecting and possessing a bonus ball - 2 Yellow Balls (5 points per ball)</td>
  </tr>
  <tr>
    <td>6</td>
    <td>Placing a bonus ball in the “nest” (3 points per ball)</td>
  </tr>
  <tr>
    <td>36</td>
    <td>Total possible points</td>
  </tr>
</table>

In the case of a tie, the robot with the fastest time wins.

@page goals Goals

For our entry we decided to focus on the autonomous aspect of the Roborodentia
competition. In particular we wanted a robot that could <em>actively adapt<em>
to the random ball locations. This was the driver for two of Caddy's unique
requirements:

@li <b>Path planning</b> - Caddy needed a way to map the arena and a shortest
path algorithm that could find the best path through a sequence of goals.

@li <b>Ball finding</b> - To make the best use of the path planning algorithm,
we needed a way to actively search for balls down untraveld cooridors.

We also decided that Caddy would need bonus ball collection capabiltiy in
order to be competitive.

@page design Design

@section team_process Collaborative Team Process

@section collaborative_tools Collaborative Tools

The team for this project was formed from interested members of the the
<a href="http://robotics.ee.calpoly.edu/">Cal Poly Robotics Club</a>.

To organize the tasks and identify critical paths in the (short) project
timeline, we used <a href="http://www.ganttproject.biz/">GanttProject</a>
to create a Gantt chart.

For code control and collabortion we used Concurrent Versions Systme
(CVS). Since this project had a competitive nature, we chose to setup and host
our own private CVS server over some of the free CVS hosting services found on
the internet.

Between face-to-face team meetings we used Drupal to host a private forum for
discussing ideas, sharing progres, etc.

@section system_arch System Architecture

Info about system architecture

@section electrical_design Electrical Design

@subsection power_motor Power Regulation and Motor Controller

Resolving software bugs and electrical noise issues at the same time is almost
impossible, so we wanted to build a reliable power supply board to provide
clean regulated power to the electronics, free of all the back EMF generated
by the DC motors. We came up with a simple design to provide

@li Raw, unregulated battery voltage for the motors via an H-bridge driver
@li Decoupled, unregulated power for the CMUcam
@li Decoupled, regulated power for the rest of the electronics

Using unregulated batter power to drive the motors meant we could save on the
cost of an expensive votage capabable of driving the relatively high power
demands of the DC motors.

We made sure to use polarized headers for all the connections because at 5 in
the morning after a long coding session you are liable to make all kinds of
stupid blunders. Even with prevention measures like this, we made a few.

@subsection ir_break_beam IR Break Beam

To detect when a ball is within the grasp of the lift we had two
options. Originally we thought that we could simply use the centroid tracking
feature of the camera since we would have the camera facing down watching the
line anyway. This turned out to be difficult for a couple reasons.

When the camera is configured to track a black line, glare from the overhead
lighting and red golf balls have the same effect on what the camera sees – a
gap in the line. This seemed like an easily surmountable problem at
first. Just change modes whenever a gap is detected, determine if it is a ball
or a glare, and act accordingly. As with any software program, introducing one
seemingly small change has the potential to severely affect the rest of the
system. This particular case was no exception. First, the CMUcam did not
handle rapid mode/parameter changes well, taking longer than we expected to go
from one mode to another. This lead to a failure in our finely tuned PID line
tracking algorithm which relied on frequent, regular updates over time. We
considered and experimented with some ways of solving this problem but none
were the quick, elegant solution we were looking for.

With a fast approaching deadline and still much to do, we decided that the
quickest way to solve the problem was to simply setup a break beam sensor in
just the right position to detect when the lift mechanism should be
raised. This was fast to implement and worked reliably.

Here is a schematic of our break beam circuit:

@todo Add a schematic of break beam circuit.

@subsection servo_reverser Servo Reverser

The mechanical design of Caddy required 6 servos:

@li Ball pickup, left side
@li Ball pickup, right side
@li Boom control
@li Ball hopper
@li Tilt action
@li Pan action

This meant that the original plan to use the five servo control outputs of the
CMUcam would be inadequate.

The following approaches were considered for occomodating the 6th servo
output:

@li \b Mechanical: Modify the mechanical design so that the ball pickup
mechanism could be controlled by just one high-torque servo. Tyson had already
done such an awesome job of designing the lift to be actuated by just one
mechanical motion that this seemed like too much to ask.

@li \b Software: Use some of the extra pins on the ATmega32 to generate a
servo PWM signal. Unfortunately we were already using the two PWM peripherals
on the ATmega32 so we would have to do this in software. We had limited timer
resources on our chip and weren't sure how we might need to use them in the
future so this was not an ideal solution.

@li \b Electrical: Leverage the fact that the 2 servos controlling the ball
pickup were the same signal, 180 degrees out of phase. This seemed like a
perfect application for a simple 555 timer circuit.

We decided to use the 555 timer approach. Using plans found online, we
fabricated the board with a 4-pin header so that the circuit could easily be
reused in the future.

@subsection wheel_encoders Wheel Encoders

The maneuvers needed at junctions and for the bonus ball pick up sequences
needed to be accurate and repeatable. To acheive this we used a black and
white encoder disk that we printed out and glued to the inside edge of each
drive wheel. @cite walters_dead_reckoning_2000

@image html  encoder_disc.png "Reflective IR wheel encoder pattern"
@image latex encoder_disc.eps "Reflective IR wheel encoder pattern" width=6cm

@todo information, photo, schematic

@section software_architecture Software Architecture

@subsection computing_platform Computing Platform

For our our computing platform we chose an ATmega32 microcontroller from
Atmel's 8-bit AVR line of microcontrollers because it was C-programmable with
free open-source tools and because we had a readily available development
board, the ERE EMBMega32.

@image html  ere_embmega32.png "EMBMega32 development board from ERE CO.,LTD"
@image latex ere_embmega32.eps "EMBMega32 development board from ERE CO.,LTD" width=6cm

@subsection line_tracking PID Line Tracking

To track the black electrical tape line, we implemented a
proportional–integral–derivative (PID) controller. In PID theory, the output
of a PID controller, @f$c(t)@f$, is defined as:

@f[
c(t) = P_E e(t) + P_I \int e(t) dt + \P_0 \frac{de}{dt}
@f]

@subsection maneuvering Maneuvering

When turning our bot by a certain number of ticks, we experienced overshoot
despite actively applying DC motor braking. We addressed the problem with the
following softare solution.

After turning for the desired number of ticks, we applied braking and counted
the number of excess ticks that occured from the instant braking was
commanded. After a fixed delay, we drove the wheels in the opposite direction
for that same number of ticks.

This worked well for the most part, however, with different battery charges,
turn amounts, and turn types, the amount of time to brake was never the
same. If we did not brake the motors for a long enough delay, our bot would
stop counting excess ticks and begin to drive the motors in the opposite
direction, too soon. With our unsophisticated encoders that cannot detect the
direction of wheel motion this resulted in a "reverse ticks" being counted
before the wheel had actually started moving in the reverse direction.

@subsection ball_detection Ball Detection and Localization

@subsection path_planning Path Planning

@page conclusion Conclusion

@section future_work Future Work

@subsection regulated_motor_voltage Regulated Motor Voltage

If we end up working with higher voltage motors again, it may be worth losing
some voltage in order to send regulated voltage to the motors. This allows for
more consistent operation across fresh and low batteries. This should also
condition our batteries better, because the battery voltage can drop until the
regulator’s threshold is reached. As long as we drop the voltage down enough,
it should be obvious when batteries are dead. As the regulator cuts out, the
bot should slow down more dramatically. A common solution in ME 405
(mechatronics) is to regulate 14.4V down to 12V with an adjustable regulator
(LM1084) for each motor. One regulator was not able to provide enough current
for both motors. When driving the motors at the same pulse width, we were able
to see a difference in how straight the bot drove, if the motors received
voltages a few hundredths apart. Yet, just having the ability to precisely and
consistently set the voltage to the motors was very useful.

@subsection 16_pwm_motor_control 16-bit PWM Motor Control

Since we were using timer 1 (a 16-bit timer) for PWM, we could have used
16-bit PWM. 8-bit resolution seemed to be sufficient with the original 6 volts
motors, but when we switched to 12 volt motors, more precise control of the
PWM signal would likely have improved the PID line tracking. As it was, we had
to use a PID offset constant of 1 which means that we would have required
division to decrease the proportional coefficient parameter of our PID control
algorithm.

@subsection quadrature_wheel_encoders Quadrature Wheel Encoders

Quadrature wheel encoders would have required more mechanical work (to mount
the reflective IR sensors 90 degrees out-of-phase) and electrical work (wiring
for twice as many sensors) but it would have helped solved some challenges
with maneuvering the robot through precise sequences such as the bonus ball
pickup.

Quadrature encoders would have allowed us to perform overshoot correction
easily and accurately. 

@page appendix Appendix

@section bom Bill of Materials

The materials for this project were funded in part by a $525 grant from the
Mechanical Engineering Student Fee Allocation Committee (MESFAC)

@todo list of materials and costs

@section gantt Gantt Chart

@image html  caddy_gantt.png "Caddy project gantt chart"
@image latex caddy_gantt.eps "Caddy project gantt chart" width=17cm

@section contributions Individual Contributions

@image html  team_photo.png "Team Photo. Left to right: Logan Kinde, Tyson Messori, Taylor Braun-Jones, Scott Barlow, Michael Shelley, Patrick McCarty"
@image latex team_photo.eps "Team Photo. Left to right: Logan Kinde, Tyson Messori, Taylor Braun-Jones, Scott Barlow, Michael Shelley, Patrick McCarty" width=12cm

@subsection taylor_contrib Taylor Braun-Jones

@todo

*/
